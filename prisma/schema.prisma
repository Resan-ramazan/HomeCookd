datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  subscriptions Subscription[]
}

model Cook {
  id    String @id @default(cuid())
  name String
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meals Meal[]
  subscriptions Subscription[]
}

model Meal {
  id    String @id @default(cuid())
  title String
  price Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cook   Cook   @relation(fields: [cookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cookId String

  subscriptionMeals SubscriptionMeal[]
}

model Subscription {
  id    String @id @default(cuid())
  title String
  price Int
  start DateTime @default(now())
  end   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cook   Cook   @relation(fields: [cookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cookId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  subscriptionMeals SubscriptionMeal[]
}

model SubscriptionMeal {
  id    String @id @default(cuid())
  price Int
  quantity Int
  deliveredAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription   Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId String

  meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealId String
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}
